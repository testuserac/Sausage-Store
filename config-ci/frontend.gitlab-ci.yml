
variables:
  VERSION: 1.0.${CI_PIPELINE_ID} 
  message: Вышла новая версия фронта сосисочной - ${VERSION}. Скачать можно по
  pachka_bot: https://api.pachca.com/webhooks/01GKW5KTY1RFJ8BT2QYE8HWB49
  download_link: ${NEXUS_REPO_URL}/sausage-store-saprykin-daniil-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

    
build-frontend-code-job:
  stage: build  
  only:
    changes:
    - frontend/*
  script:        
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/frontend 

sonarqube-frontend-sast:
 stage: test
 image: sonarsource/sonar-scanner-cli:latest # тот самый docker-образ, о котором мы все узнаем в будущем
 script:
   - cd frontend
   - >
     sonar-scanner \
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND} \
      -Dsonar.sources=. \
      -Dsonar.host.url=${SONARQUBE_URL} \
      -Dsonar.login=${SONAR_LOGIN_front} \
      -Dsonar.projectName=${SONAR_NAME_FRONT} \
      -Dsonar.qualitygate.wait=true   
 artifacts:
   paths:
    - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST        
 needs:
    - job: build-frontend-code-job

upload-frontend-release:
  stage: release
  only:
    changes:
    - frontend/*
  needs:
    - sonarqube-frontend-sast
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/sausage-store-saprykin-daniil-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz      

slack-notification-frontend:
  stage: notify
  script:
    - 'curl -X POST -H "Content-type: application/json"
     -d " { \"message\": \"$message [ссылке]($download_link)\" } " $pachka_bot'
  needs:
    - upload-frontend-release